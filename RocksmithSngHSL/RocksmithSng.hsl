/*

Hex Workshop Structure Library
Rocksmith .sng File

Usage:

- Install Hex Workshop :)
- Open your .sng file
- Show the Structure Viewer Window (Options menu, or Ctrl+T)
- Click the Select Structure Library button (or Ctrl+Shift+L)
- Select this file
- Click the hammer-looking icon and then the "ParseFile" option in the dropdown
- Now you should have a fully parsed structure view of the .sng file!

*/

#include "standard-types.hsl"

#pragma displayname("Rocksmith .sng")
#pragma fileextensions(".sng")

// Uncomment this line if you are editing PC .sng files
#pragma byteorder(little_endian)
// Uncomment this line if you are editing console .sng files
// #pragma byteorder(big_endian)

// Make sure this value is greater than the number of elements in any array
// Free Bird has up to 1262 notes in a single Notes array!
#pragma maxarray(2048)

struct HEADER
{
    unsigned long Signature;
    __verify(Signature == 0x00000031);
};

struct EBEAT
{
    float Time;
    short Measure;
    short Beat;
    bool IsFirstBeatInMeasure;
    blob _unknown[3];
};

struct EBEATS_SECTION
{
    long BeatCount;
    struct EBEAT Beats[BeatCount];
};

struct PHRASE
{
    long Disparity;
    long MaxDifficulty;
    long PhraseIterationLinks;
    char Name[32];
};

struct PHRASES_SECTION
{
    long PhraseCount;
    struct PHRASE Phrases[PhraseCount];
};

struct CHORD_TEMPLATE
{
    long Frets[6];
    long Fingers[6];
    long Notes[6];
    char Name[32];
};

struct CHORD_TEMPLATES_SECTION
{
    long ChordTemplateCount;
    struct CHORD_TEMPLATE ChordTemplates[ChordTemplateCount];
};

struct FRET_HAND_MUTE_TEMPLATES_SECTION
{
    long FretHandMuteTemplateCount;
    __verify(FretHandMuteTemplateCount == 0);
};

struct VOCALS
{
    float Time;
    long Note;
    long Length;
    char Lyric[32];
};

struct VOCALS_SECTION
{
    long VocalsCount;
    struct VOCALS Vocals[VocalsCount];
};

struct PHRASE_ITERATION
{
    long PhraseId;
    float StartTime;
    float EndTime;
};

struct PHRASE_ITERATIONS_SECTION
{
    long PhraseIterationCount;
    struct PHRASE_ITERATION PhraseIterations[PhraseIterationCount];
};

struct PHRASE_PROPERTY
{
    long PhraseId;
    long Difficulty;
    long Empty;
    // next two may be reversed
    short LevelJump;
    short Redundant;
};

struct PHRASE_PROPERTIES_SECTION
{
    long PhrasePropertyCount;
    struct PHRASE_PROPERTY PhraseProperties[PhrasePropertyCount];
};

struct LINKED_DIFF
{
    long ParentId;
    long ChildId;
    blob _unknown[4];
};

struct LINKED_DIFFS_SECTION
{
    long LinkedDiffCount;
    struct LINKED_DIFF LinkedDiffs[LinkedDiffCount];
};

struct CONTROL
{
    float Time;
    char Code[32];
};

struct CONTROLS_SECTION
{
    long ControlCount;
    struct CONTROL Controls[ControlCount];
};

struct EVENT
{
    float Time;
    char Code[256];
};

struct EVENTS_SECTION
{
    long EventCount;
    struct EVENT Events[EventCount];
};

struct SECTION
{
    char Name[32];
    long Number;
    float StartTime;
    float EndTime;
    long StartPhraseIterationIndex;
    long EndPhraseIterationIndex;
    blob _unknown[8];
};

struct SECTIONS_SECTION
{
    long SectionCount;
    struct SECTION Sections[SectionCount];
};

struct ANCHOR
{
    float StartTime;
    float EndTime;
    float _unknown_JustBeforeEndTime;
    long Fret;
    long PhraseIterationIndex;
};

struct ANCHORS_SECTION
{
    long AnchorCount;
    struct ANCHOR Anchors[AnchorCount];
};

struct UNKNOWN1
{
    float _unknown_Time;
    long _unknown_Fret;
};

struct UNKNOWN1_SECTION
{
    long Count;
    struct UNKNOWN1 Unknowns[Count];
};

struct UNKNOWN2
{
    blob _unknown1[4];
    blob _unknown2[4];
    long _unknown3;
};

struct UNKNOWN2_SECTION
{
    long Count;
    struct UNKNOWN2 Unknowns[Count];
};

struct UNKNOWN_FINAL
{
    char _unknown1[64];
    long _unknown2;
    long _unknown3;
};

struct UNKNOWN_FINAL_SECTION
{
    long Count;
    struct UNKNOWN_FINAL Unknowns[Count];
};

struct HAND_SHAPE
{
    float StartTime;
    float EndTime;
    float _unknown1;
    float _unknown2;
    long ChordId;
    float _unknown_StartTimeAgain;
    float _unknown_JustBeforeEndTime;
};

struct HAND_SHAPES_SECTION
{
    long HandShapeCount;
    struct HAND_SHAPE HandShapes[HandShapeCount];
};

struct NOTE
{
    float StartTime;
    long String;
    long Fret;
    long ChordId;
    long _unknown1;
    float SustainTime;
    long Bend;
    long SlideTo;
    bool Tremolo;
    bool Harmonic;
    bool PalmMute;
    bool Hopo;
    bool HammerOn;
    bool PullOff;
    bool Ignore;
    bool HighDensity;
    blob _unknown2[4];
    long PhraseIterationStartIndex;
    long PhraseIterationIndexId;
};

struct NOTES_SECTION
{
    long NoteCount;
    struct NOTE Notes[NoteCount];
};

struct LEVEL_PHRASE
{
    float _unknown;
};

struct LEVEL_PHRASES_SECTION
{
    long PhraseCount;
    struct LEVEL_PHRASE Phrases[PhraseCount];
};

struct LEVEL_PHRASE_ITERATIONS_1_SECTION
{
    long PhraseIterationCount;
    long _unknown[PhraseIterationCount];
};

struct LEVEL_PHRASE_ITERATIONS_2_SECTION
{
    long PhraseIterationCount;
    long _unknown[PhraseIterationCount];
};

struct LEVEL
{
    long Difficulty;
    struct ANCHORS_SECTION AnchorsSection;
    struct UNKNOWN1_SECTION UnknownSection;
    struct HAND_SHAPES_SECTION HandShapesSection;
    struct NOTES_SECTION NotesSection;
    struct LEVEL_PHRASES_SECTION PhrasesSection;
    struct LEVEL_PHRASE_ITERATIONS_1_SECTION PhraseIterations1Section;
    struct LEVEL_PHRASE_ITERATIONS_2_SECTION PhraseIterations2Section;
};

struct LEVELS_SECTION
{
    long LevelCount;
    struct LEVEL Levels[LevelCount];
};

struct METADATA_SECTION
{
    long _unknown1;
    float _unknown2;
    long _unknown3;
    float _unknown4;
    blob _unknown5[4];
    float _unknown6;
    float BeatTiming;
    float FirstBeatTime;
    char LastConversionDateTime[32];
    char Title[64];
    char Arrangement[32];
    char Artist[32];
    short Part;
    float SongLength;
    long Tuning;
    float _unknown8;
    float _unknown9;
    float _unknown10;
    long _unknown11;
    struct UNKNOWN2_SECTION _unknownSection;
    struct UNKNOWN_FINAL_SECTION _unknownFinalSection;
};

function ParseFile
{
    UQWord pos = 0;
    pos += __addStructureAt(pos, "HEADER", "");
    pos += __addStructureAt(pos, "EBEATS_SECTION", "");
    pos += __addStructureAt(pos, "PHRASES_SECTION", "");
    pos += __addStructureAt(pos, "CHORD_TEMPLATES_SECTION", "");
    pos += __addStructureAt(pos, "FRET_HAND_MUTE_TEMPLATES_SECTION", "");
    pos += __addStructureAt(pos, "VOCALS_SECTION", "");
    pos += __addStructureAt(pos, "PHRASE_ITERATIONS_SECTION", "");
    pos += __addStructureAt(pos, "PHRASE_PROPERTIES_SECTION", "");
    pos += __addStructureAt(pos, "LINKED_DIFFS_SECTION", "");
    pos += __addStructureAt(pos, "CONTROLS_SECTION", "");
    pos += __addStructureAt(pos, "EVENTS_SECTION", "");
    pos += __addStructureAt(pos, "SECTIONS_SECTION", "");
    pos += __addStructureAt(pos, "LEVELS_SECTION", "");
    pos += __addStructureAt(pos, "METADATA_SECTION", "");
}